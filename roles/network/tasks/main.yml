# vim: ft=yaml.ansible
---

# TODO: wireguard

- name: Install network related packages
  ansible.builtin.include_role:
    name: pacman
    tasks_from: install_pkg
  vars:
    pacman_packages:
      - networkmanager
      - pacrunner  # PAC proxy support
      - wireless-regdb
      # systemd-resolved resolconf support
      - systemd-resolvconf
      # mDNS
      - avahi
      - nss-mdns
      # Samba
      - samba
      # IPSec
      - networkmanager-l2tp
      - strongswan
      # Logmein Hamachi
      - logmein-hamachi  # TODO: /var/lib/logmein-hamachi/h2-engine-override.cfg (Ipc.User username)
      # network packet analyzer
      - wireshark-cli
      # local server (pixelserv and reverse proxy to traefik)
      - caddy
      # reverse proxy to docker containered serices
      - traefik
      # syncthing
      - syncthing
      # geoip
      - geoip
      - geoip-database
      - geoip-database-extra
      - libmaxminddb

- name: Install iwd
  ansible.builtin.include_role:
    name: pacman
    tasks_from: install_pkg
  vars:
    pacman_packages:
      - iwd  # wpa_supplicant alternative
  when: '(network.wifi_backend | default("wpa_supplicant")) == "iwd"'

- name: Create sambashare group
  become: true
  ansible.builtin.group:
    name: sambashare
    system: true

- name: Add user to 'network' and 'sambashare' groups
  ansible.builtin.include_role:
    name: user
    tasks_from: user_add_group
  vars:
    user_new_groups:
      # unprivileged user network management
      - network
      # Samba
      - sambashare
      # Ability to analyze network packets
      - wireshark

- name: Add user traefik to docker group
  become: true
  ansible.builtin.user:
    append: true
    name: 'traefik'
    groups: 'docker'

- name: Create usershares folder
  become: true
  ansible.builtin.file:
    path: '/var/lib/samba/usershares'
    state: directory
    mode: '1770'
    owner: root
    group: sambashare

- name: Apply config files
  become: true
  ansible.builtin.template:
    src: 'network/{{ item.src }}.j2'
    dest: '{{ item.dest }}/{{ item.src }}'
    mode: '644'
  vars:
    configs:
      # allow users in group `network` to contol NetworkManager
      - src: '50-org.freedesktop.NetworkManager.rules'
        dest: '/etc/polkit-1/rules.d'
      # configure wifi backend
      - src: 'wifi_backend.conf'
        dest: '/etc/NetworkManager/conf.d/'
      # configure wifi powersave
      - src: 'wifi_powersave.conf'
        dest: '/etc/NetworkManager/conf.d/'
      # systemd-resolved
      - src: 'resolved.conf'
        dest: '/etc/systemd/'
      # mDNS
      - src: 'nsswitch.conf'
        dest: '/etc'
      # Samba
      - src: 'smb.conf'
        dest: '/etc/samba'
      # install NetworkManager specific caddy service
      - src: 'caddy.service'
        dest: '/etc/systemd/system/'
      # caddy config
      - src: 'Caddyfile'
        dest: '/etc/caddy/'
      # caddy reverse proxy for cups web admin (localhost:631)
      - src: 'cups'
        dest: '/etc/caddy/conf.d/'
      # caddy reverse proxy for syncthing web admin (localhost:8384)
      - src: 'syncthing'
        dest: '/etc/caddy/conf.d/'
      # traefik config
      - src: 'traefik.yml'
        dest: '/etc/traefik/'
      - src: 'dynamic-config.yml'
        dest: '/etc/traefik/'
      # fix missing Wi-Fi after resume from hibernate
      - src: 'fix-ath11k-hibernate.service'
        dest: '/etc/systemd/system/'
      # set wireless regdom
      - src: 'wireless-regdom'
        dest: '/etc/conf.d'
  loop: '{{ configs }}'

- name: Enable services (now)
  become: true
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: true
    state: started
  vars:
    units:
      # systemd-resolved
      - 'systemd-resolved.service'
      # mDNS
      - 'avahi-daemon.service'
      # Samba
      - 'smb.service'
      - 'nmb.service'
      - 'winbind.service'
      # Caddy
      - 'caddy.service'
      # Traefik
      - 'traefik.service'
  loop: '{{ units }}'

- name: Enable fix missing Wi-Fi after resume from hibernate
  become: true
  ansible.builtin.systemd:
    name: 'fix-ath11k-hibernate.service'
    daemon_reload: true
    enabled: true

- name: Enable syncthing user service
  ansible.builtin.systemd:
    name: 'syncthing.service'
    daemon_reload: true
    enabled: true
    state: started
    scope: user

- name: Create resolv.conf symlink
  become: true
  ansible.builtin.file:
    force: true
    src: '/run/systemd/resolve/stub-resolv.conf'
    dest: '/etc/resolv.conf'
    state: link

- name: Set user's samba password
  become: true
  ansible.builtin.shell: |
    set -e -o pipefail
    pwdline="$(pdbedit -L -w | cut -d: -f1,4)"
    echo "$pwdline"
    ( echo '{{ user.password }}' && echo '{{ user.password }}' ) | \
      if echo "$pwdline" | grep -q '{{ user.name }}'
      then
        smbpasswd -s '{{ user.name }}'
      else
        smbpasswd -s -a '{{ user.name }}'
      fi
  args:
    executable: /bin/bash
  register: smbpasswd_result
  changed_when: '([user.name, user.password.encode("utf-16le") | hash("md4") | upper] | join(":")) !=
    (smbpasswd_result.stdout_lines | first | default(""))'
  no_log: true

- name: Add firewalld rules
  ansible.builtin.include_role:
    name: firewalld
    tasks_from: add_rule
  vars:
    firewalld_services:
      # mDNS
      - mdns
      # llmnr
      - llmnr
      - llmnr-client
      - llmnr-tcp
      - llmnr-udp
      # Samba
      - samba
      - samba-client
      - netbios-ns

- name: Enable IP forwarding
  become: true
  ansible.posix.sysctl:
    name: '{{ item }}'
    sysctl_file: '/etc/sysctl.d/30-ipforward.conf'
    sysctl_set: true
    value: '1'
  vars:
    sysctls:
      - 'net.ipv4.ip_forward'
      - 'net.ipv6.conf.default.forwarding'
      - 'net.ipv6.conf.all.forwarding'
  loop: '{{ sysctls }}'
  when: network.ip_forwarding | default(false)

- name: Create hamachi var dir
  become: true
  ansible.builtin.file:
    path: '/var/lib/logmein-hamachi'
    state: directory
    mode: '755'

- name: Allow current user to manage hamachi
  become: true
  ansible.builtin.template:
    src: 'network/h2-engine-override.cfg.j2'
    dest: '/var/lib/logmein-hamachi/h2-engine-override.cfg'
    mode: '644'

- name: Trust caddy certificate
  become: true
  ansible.builtin.command: 'caddy trust --address=unix//run/caddy/admin.sock'
  register: caddy_trust_result
  changed_when: '"root certificate is already trusted by system" not in caddy_trust_result.stderr'
