# vim: ft=yaml.ansible
---

# TODO: wireguard

- name: Install network related packages
  ansible.builtin.include_role:
    name: pacman
    tasks_from: install_pkg
  vars:
    pacman_packages:
      - networkmanager
      - wireless-regdb
      # mDNS
      - avahi
      - nss-mdns
      # Samba
      - samba
      # IPSec
      - networkmanager-l2tp
      - strongswan
      # Logmein Hamachi
      - logmein-hamachi  # TODO: /var/lib/logmein-hamachi/h2-engine-override.cfg (Ipc.User username)

- name: Create sambashare group
  become: true
  ansible.builtin.group:
    name: sambashare
    system: true

- name: Add user to 'network' and 'sambashare' groups
  ansible.builtin.include_role:
    name: user
    tasks_from: user_add_group
  vars:
    user_new_groups:
      # unprivileged user network management
      - network
      # Samba
      - sambashare

- name: Ensure config dirs exists
  become: true
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    mode: '755'
  vars:
    dirs:
      - '/etc/systemd/resolved.conf.d'
  loop: '{{ dirs }}'

- name: Create usershares folder
  become: true
  ansible.builtin.file:
    path: '/var/lib/samba/usershares'
    state: directory
    mode: '1770'
    owner: root
    group: sambashare

- name: Apply config files
  become: true
  ansible.builtin.template:
    src: 'network/{{ item.src }}.j2'
    dest: '{{ item.dest }}/{{ item.src }}'
    mode: '644'
  vars:
    configs:
      - src: '50-org.freedesktop.NetworkManager.rules'
        dest: '/etc/polkit-1/rules.d'
      # systemd-resolved
      - src: 'resolved.conf'
        dest: '/etc/systemd/resolved.conf.d'
      # mDNS
      - src: 'nsswitch.conf'
        dest: '/etc'
      # Samba
      - src: 'smb.conf'
        dest: '/etc/samba'
  loop: '{{ configs }}'

- name: Enable services
  become: true
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: true
    state: started
  vars:
    units:
      # systemd-resolved
      - 'systemd-resolved.service'
      # mDNS
      - 'avahi-daemon.service'
      # Samba
      - 'smb.service'
      - 'nmb.service'
      - 'winbind.service'
  loop: '{{ units }}'

- name: Create resolv.conf symlink
  become: true
  ansible.builtin.file:
    force: true
    src: '/run/systemd/resolve/stub-resolv.conf'
    dest: '/etc/resolv.conf'
    state: link

- name: Set user's samba password
  become: true
  ansible.builtin.shell: |
    set -e -o pipefail
    pwdline="$(pdbedit -L -w | cut -d: -f1,4)"
    echo "$pwdline"
    ( echo '{{ user.password }}' && echo '{{ user.password }}' ) | \
      if echo "$pwdline" | grep -q '{{ user.name }}'
      then
        smbpasswd -s '{{ user.name }}'
      else
        smbpasswd -s -a '{{ user.name }}'
      fi
  args:
    executable: /bin/bash
  register: smbpasswd_result
  changed_when: '([user.name, user.password.encode("utf-16le") | hash("md4") | upper] | join(":")) !=
    (smbpasswd_result.stdout_lines | first | default(""))'
  no_log: true

- name: Add firewalld rules
  ansible.builtin.include_role:
    name: firewalld
    tasks_from: add_rule
  vars:
    firewalld_services:
      # mDNS
      - mdns
      # Samba
      - samba
      - samba-client
      - netbios-ns

- name: Enable IP forwarding
  become: true
  ansible.posix.sysctl:
    name: '{{ item }}'
    sysctl_file: '/etc/sysctl.d/30-ipforward.conf'
    sysctl_set: true
    value: '1'
  vars:
    sysctls:
      - 'net.ipv4.ip_forward'
      - 'net.ipv6.conf.default.forwarding'
      - 'net.ipv6.conf.all.forwarding'
  loop: '{{ sysctls }}'
  when: network.ip_forwarding | default(false)

- name: Create hamachi var dir
  become: true
  ansible.builtin.file:
    path: '/var/lib/logmein-hamachi'
    state: directory
    mode: '755'

- name: Allow current user to manage hamachi
  become: true
  ansible.builtin.template:
    src: 'network/h2-engine-override.cfg.j2'
    dest: '/var/lib/logmein-hamachi/h2-engine-override.cfg'
    mode: '644'
