# vim: ft=yaml.ansible
---

- name: Install samba
  ansible.builtin.include_role:
    name: utils
    tasks_from: install_pkg
  vars:
    packages:
      - samba
      - wsdd2

- name: Permit traffic for samba in home zone
  become: true
  ansible.posix.firewalld:
    zone: '{{ item.0 }}'
    service: '{{ item.1 }}'
    permanent: true
    state: enabled
  vars:
    zones:
      - home
      - trusted
    services:
      - samba
      - samba-client
      - netbios-ns
  loop: '{{ zones | product(services) | list }}'

- name: Create sambashare group
  become: true
  ansible.builtin.group:
    name: sambashare
    system: true

- name: Add user to sambashare group
  ansible.builtin.include_role:
    name: utils
    tasks_from: user_add_group
  vars:
    new_groups: sambashare

- name: Create usershares folder
  become: true
  ansible.builtin.file:
    path: '/var/lib/samba/usershares'
    state: directory
    mode: '1770'
    owner: root
    group: sambashare

- name: Apply smb.conf
  become: true
  ansible.builtin.template:
    src: 'samba/smb.conf.j2'
    dest: '/etc/samba/smb.conf'
    mode: '644'

- name: Enable samba services
  become: true
  ansible.builtin.systemd:
    name: '{{ item }}'
    daemon_reload: true
    enabled: true
  vars:
    units:
      - 'smb.service'
      - 'nmb.service'
      - 'wsdd2.service'
  loop: '{{ units }}'

- name: Set user's samba password
  become: true
  ansible.builtin.shell: |
    set -e -o pipefail
    pwdline="$(pdbedit -L -w | cut -d: -f1,4)"
    echo "$pwdline"
    ( echo '{{ user.password }}' && echo '{{ user.password }}' ) | \
      if echo "$pwdline" | grep -q '{{ user.name }}'
      then
        smbpasswd -s '{{ user.name }}'
      else
        smbpasswd -s -a '{{ user.name }}'
      fi
  args:
    executable: /bin/bash
  register: smbpasswd_result
  changed_when: '([user.name, user.password.encode("utf-16le") | hash("md4") | upper] | join(":")) !=
    (smbpasswd_result.stdout_lines | first | default(""))'
  no_log: true
