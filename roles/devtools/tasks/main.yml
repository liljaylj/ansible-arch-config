# vim: ft=yaml.ansible
---

- name: Install developer tools
  ansible.builtin.include_role:
    name: pacman
    tasks_from: install_pkg
  vars:
    pacman_packages:
      # - proto-bin  # programming language version manager

      # utils
      - nvchecker  # new version checker
      - tokei  # count line of code
      - cloc  # count line of code

      # editing
      # neovim
      - neovim
      - bob  # neovim version manager
      - python-pynvim  # python 3 provider for neovim
      - neovim-drop-in  # drop-in replacement for vi/vim with neovim
      - nvimpager  # neovim based pager
      - vim-spell-en
      - vim-spell-ru
      - tree-sitter-c
      - tree-sitter-lua
      - tree-sitter-markdown
      - tree-sitter-query
      - tree-sitter-vimdoc
      - lua51  # needed lazy.nvim luarocks support

      # markdown
      - marksman
      - mermaid-cli  # diagrams

      # rust
      - rustup
      - cargo-watch  # watch and recompile cargo project on change
      - cargo-tarpaulin  # generate code coverage reports
      - cargo-audit  # scan for security vulnerabilities
      - cargo-deny  # scan and lint dependencies
      - cargo-expand  # expand rust macros
      - cargo-generate  # bootstrap projects from templates
      - cargo-modules  # visualize crate's module tree
      - cargo-bloat  # find out what takes most of the space in your executable
      - cargo-edit  # manage cargo dependencies
      - cargo-geiger  # detect unsafe Rust in code and dependencies
      - cargo-fuzz
      - cargo-flamegraph
      - cargo-depgraph
      - cargo-machete
      - cargo-public-api
      - cargo-sweep  # clean unused build files
      - cargo-update  # update crates installed using `cargo install`
      - cargo-outdated
      - sqlx-cli
      - clang
      - lld
      - lldb
      - gdb

      # go
      - go

      # nodejs
      - nodejs-lts-jod
      - npm
      - pnpm
      - vscode-json-languageserver
      - typescript-language-server
      - eslint_d
      - prettier
      - vue-language-server  # Vue 3
      - nodejs-vls  # Vue 2
      - eslint-language-server

      # css
      - stylelint
      - stylelint-config-standard
      - tailwindcss-language-server

      # vim
      - ctags

      # toml
      - taplo-cli

      # php
      - nodejs-intelephense
      - vscode-php-debug
      - composer

      # java dev
      - jdk-openjdk
      - jdk17-openjdk
      - jdk21-openjdk
      - jdtls

      # intellij idea
      - jre-jetbrains
      - rustrover

      # python
      - python
      - python-pip
      - python-pipx
      - python-virtualenv
      - python-aiohttp  # needed for codestats-relay
      - pyright
      - python-lsp-server
      - python-mccabe
      - python-pycodestyle
      - python-pydocstyle
      - python-pyflakes
      - python-pylint
      - python-rope
      - yapf
      - python-whatthepatch
      - bpython  # interpreter
      - python-uv  # python package manager

      # lua
      - lua
      - luarocks
      - lua-language-server
      - stylua
      - luacheck  # lua linter
      - selene  # new lua linter
      - busted  # lua unit testing

      # bash
      - bash-language-server
      - shellcheck
      - shfmt
      - amber-bash-bin

      # yaml
      - yaml-language-server

      # docker
      - dockerfile-language-server
      - nodejs-compose-language-service

      # ansible
      - ansible-language-server
      - ansible-lint

      # sql
      - sqlfluff
      - sql-language-server
      - pgformatter

      # tex
      - texlab

      # git
      - git
      - git-delta  # modern diff
      - difftastic  # syntactic diff
      - git-extras
      - cocogitto  # lint conventional commits
      - lazygit
      - github-cli
      - glab
      - gibo-bin  # gitignore boilerplate retriever
      - git-filter-repo  # quickly rewrite git repo history

      # database management tools
      - pgcli
      - python-keyring  # for pgcli support for keyring (secret service)
      - python-sshtunnel  # for pgcli ssh tunneling functionality
      - litecli
      - valkey  # for redis-cli

      # blog
      - hugo
      - mdbook

      # cloud provider cli tools
      - aws-cli-v2
      - aws-vault

- name: Install rust toolchains
  vars:
    toolchains:
      - stable
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      set -Eeuo pipefail
      rustup install {{ dev_tools.rust.toolchains | default(default_toolchains) | join(' ') }} | grep unchanged || true
  register: install_toolchains_result
  changed_when: '(install_toolchains_result.stdout_lines | length) !=
    (dev_tools.rust.toolchains | default(default_toolchains) | length)'

- name: Set default rust toolchain
  vars:
    default_toolchain: stable
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      rustup default
      rustup default {{ dev_tools.rust.toolchains | default([default_toolchain]) | first }}
      rustup default
  register: default_toolchain_result
  changed_when: '(default_toolchain_result.stdout_lines | first) != (default_toolchain_result.stdout_lines | last)'

- name: Install rust components
  vars:
    rust_components:
      - cargo
      - clippy
      - rust-analyzer
      - rust-docs
      - rust-src
      - rust-std
      - rustc
      - rustfmt
  ansible.builtin.shell:
    cmd: |
      set -Eeuo pipefail
      rustup component add {{ dev_tools.rust.components | default(rust_components) | join(' ') }} 2>&1 | \
        grep 'is up to date' || true
  register: add_components_result
  changed_when: '(add_components_result.stdout_lines | length) !=
    (dev_tools.rust.components | default(rust_components) | length)'

- name: Update rust toolchain for archconfig user
  become: true
  become_user: '{{ archconfig_user.name | default("archconfig") }}'
  vars:
    default_toolchain: stable
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      set -Eeuo pipefail
      rustup update {{ default_toolchain }} 2>&1 | grep 'is up to date' || true
  register: archconfig_update_toolchain_result
  changed_when: '(archconfig_update_toolchain_result.stdout_lines | length) > 0'

- name: Set default rust toolchain for archconfig user
  become: true
  become_user: '{{ archconfig_user.name | default("archconfig") }}'
  vars:
    default_toolchain: stable
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      rustup default
      rustup default {{ default_toolchain }}
      rustup default
  register: archconfig_default_toolchain_result
  changed_when: '(archconfig_default_toolchain_result.stdout_lines | first) !=
    (archconfig_default_toolchain_result.stdout_lines | last)'

- name: Set default java toolchain
  become: true
  vars:
    java_version: 'java-17-openjdk'
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      set -Eeuxo pipefail
      prev_java_version="$(archlinux-java status | { grep default || true; })"
      archlinux-java set {{ java_version }}
      new_java_version="$(archlinux-java status | grep default)"
      if [ "$prev_java_version" != "$new_java_version" ]; then
        echo 'changed'
      fi
  register: set_java_result
  changed_when: "'changed' in set_java_result.stdout"

- name: Apply profile.d
  become: true
  ansible.builtin.template:
    src: 'devtools/{{ item }}.j2'
    dest: '/etc/profile.d/{{ item }}'
    mode: '644'
  with_items:
    - 50-debuginfo.sh
    - 50-java.sh
    - 50-make.sh
    - 50-rust.sh
