# vim: ft=yaml.ansible
---

- name: Install developer tools
  ansible.builtin.include_role:
    name: utils
    tasks_from: install_pkg
  vars:
    packages:
      - rustup
      - rust-analyzer
      - cargo-watch  # watch and recompile cargo project on change
      - cargo-tarpaulin  # generate code coverage reports
      - cargo-audit  # scan for security vulnerabilities
      - cargo-deny  # scan and lint dependencies
      - cargo-expand  # expand rust macros
      - clang
      - lld
      - go
      - nodejs
      - npm
      - php
      - php7
      ## php extensions
      - php7-gd
      - php7-pgsql
      - php7-sqlite
      - php7-redis
      ## end php extensions
      - xdebug
      - composer
      - jdk-openjdk
      - jdk17-openjdk
      ## libs
      - python-aiohttp  # needed for codestats-relay
      ## lsp
      - lua-language-server
      - stylua
      - bash-language-server
      - shellcheck
      - shfmt
      - ansible-language-server
      - ansible-lint
      - pyright
      - python-lsp-server
      - python-mccabe
      - python-pycodestyle
      - python-pydocstyle
      - python-pyflakes
      - python-pylint
      - python-rope
      - yapf
      - python-whatthepatch
      ### git
      - git-delta  # modern diff
      - git-extras
      - cocogitto  # lint conventional commits
      - lazygit
      ### tools
      - github-cli
      - glab
      - aws-cli-v2-bin  # AWS cli
      - doctl  # DigitalOcean cli
      - web-ext  # web extension developer tools
      ## arch linux packaging
      - devtools  # arch package build tools
      - namcap  # arch package analysis
      ## database management tools
      - pgcli

- name: Install rust toolchains
  vars:
    rust_toolchains:
      - stable
      - nightly
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: 'rustup install {{ rust_toolchains | join(" ") }} | grep unchanged || true'
  register: install_toolchains_result
  changed_when: '(install_toolchains_result.stdout_lines | length) != (rust_toolchains | length)'


- name: Set default rust toolchain
  vars:
    rust_default_toolchain: nightly
  ansible.builtin.command:
    cmd: 'rustup default {{ rust_default_toolchain }}'
  register: install_result
  changed_when: '"unchanged" not in (install_result.stdout_lines | last)'

- name: Set default java toolchain
  become: true
  vars:
    java_version: 'java-17-openjdk'
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      set -Eeuxo pipefail
      prev_java_version="$(archlinux-java status | { grep default || true; })"
      archlinux-java set {{ java_version }}
      new_java_version="$(archlinux-java status | grep default)"
      if [ "$prev_java_version" != "$new_java_version" ]; then
        echo 'changed'
      fi
  register: set_java_result
  changed_when: "'changed' in set_java_result.stdout"

- name: Apply profile.d
  become: true
  ansible.builtin.template:
    src: 'devtools/{{ item }}'
    dest: '/etc/profile.d/{{ item | splitext | first }}'
    mode: '644'
  with_items:
    - 50-debuginfo.sh.j2
    - 50-java.sh.j2
    - 50-make.sh.j2
    - 50-rust.sh.j2

- name: Enable php 7 extensions
  become: true
  ansible.builtin.template:
    src: 'devtools/30-php-extensions.ini.j2'
    dest: '/etc/php7/conf.d/30-extensions.ini'
    mode: '644'
