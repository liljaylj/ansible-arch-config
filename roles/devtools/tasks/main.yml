# vim: ft=yaml.ansible
---

- name: Install developer tools
  ansible.builtin.include_role:
    name: pacman
    tasks_from: install_pkg
  vars:
    packages:
      # rust
      - rustup
      - cargo-watch  # watch and recompile cargo project on change
      - cargo-tarpaulin  # generate code coverage reports
      - cargo-audit  # scan for security vulnerabilities
      - cargo-deny  # scan and lint dependencies
      - cargo-expand  # expand rust macros
      - cargo-generate  # bootstrap projects from templates
      - sqlx-cli
      - clang
      - lld
      - lldb

      # go
      - go

      # nodejs
      - nodejs
      - npm
      - pnpm
      - nodejs-emmet-ls
      - vscode-json-languageserver
      - typescript-language-server
      - eslint_d
      - prettier
      - pkgbuild-language-server

      # css
      - stylelint
      - stylelint-config-standard

      # web extensions
      - web-ext  # web extension developer tools

      # vim
      - ctags

      # toml
      - taplo-cli

      # php
      - nodejs-intelephense
      - vscode-php-debug

      # java dev
      - jdk-openjdk
      - jdk8-openjdk
      - jdk17-openjdk
      - jdtls

      # # intellij idea
      # - intellij-idea-community-edition
      # - jre-jetbrains

      # python
      - python
      - python-pip
      - python-pipx
      - python-aiohttp  # needed for codestats-relay
      - pyright
      - python-lsp-server
      - python-mccabe
      - python-pycodestyle
      - python-pydocstyle
      - python-pyflakes
      - python-pylint
      - python-rope
      - yapf
      - python-whatthepatch

      # lua
      - lua
      - luarocks
      - lua-language-server
      - stylua
      - luacheck

      # bash
      - bash-language-server
      - shellcheck
      - shfmt

      # yaml
      - yaml-language-server

      # docker
      - dockerfile-language-server

      # ansible
      - ansible-language-server
      - ansible-lint

      # sql
      - sqlfluff
      - sql-language-server

      # tex
      - texlab

      # git
      - git
      - git-delta  # modern diff
      - difftastic  # syntactic diff
      - git-extras
      - gitflow-avh
      - cocogitto  # lint conventional commits
      - lazygit
      - github-cli
      - glab

      # cloud cli
      - aws-cli-v2  # AWS cli
      - doctl  # DigitalOcean cli

      # database management tools
      - pgcli
      - python-sshtunnel  # for pgcli ssh tunneling functionality
      - litecli
      - redis  # for redis-cli

- name: Install rust toolchains
  vars:
    rust_toolchains:
      - stable
      - nightly
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      set -Eeuo pipefail
      rustup install {{ rust_toolchains | join(' ') }} | grep unchanged || true
  register: install_toolchains_result
  changed_when: '(install_toolchains_result.stdout_lines | length) != (rust_toolchains | length)'

- name: Set default rust toolchain
  vars:
    rust_default_toolchain: nightly
  ansible.builtin.command:
    cmd: 'rustup default {{ rust_default_toolchain }}'
  register: install_result
  changed_when: '"unchanged" not in (install_result.stdout_lines | last)'

- name: Install rust components
  vars:
    rust_components:
      - cargo
      - clippy
      - rust-analyzer
      - rust-docs
      - rust-src
      - rust-std
      - rustc
      - rustfmt
  ansible.builtin.shell:
    cmd: |
      set -Eeuo pipefail
      rustup component add {{ rust_components | join(' ') }} 2>&1 | grep 'is up to date' || true
  register: add_components_result
  changed_when: '(add_components_result.stdout_lines | length) != (rust_components | length)'

- name: Set default rust toolchain for archconfig user
  become: true
  become_user: '{{ archconfig_user.name | default("archconfig") }}'
  vars:
    rust_default_toolchain: nightly
  ansible.builtin.command:
    cmd: 'rustup default {{ rust_default_toolchain }}'
  register: install_result
  changed_when: '"unchanged" not in (install_result.stdout_lines | last)'

- name: Set default java toolchain
  become: true
  vars:
    java_version: 'java-17-openjdk'
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      set -Eeuxo pipefail
      prev_java_version="$(archlinux-java status | { grep default || true; })"
      archlinux-java set {{ java_version }}
      new_java_version="$(archlinux-java status | grep default)"
      if [ "$prev_java_version" != "$new_java_version" ]; then
        echo 'changed'
      fi
  register: set_java_result
  changed_when: "'changed' in set_java_result.stdout"

- name: Apply profile.d
  become: true
  ansible.builtin.template:
    src: 'devtools/{{ item }}.j2'
    dest: '/etc/profile.d/{{ item }}'
    mode: '644'
  with_items:
    - 50-debuginfo.sh
    - 50-java.sh
    - 50-make.sh
    - 50-rust.sh
